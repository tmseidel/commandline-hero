grammar org.remus.cmdline.CommandLine with org.eclipse.xtext.common.Terminals

generate commandLine "http://www.remus-software.org/cmdline/1.0"


Model:
	
	(programs=Program)?
	(system=System)?
	
	
	
;

System:
	'system ' name=QualifiedName '{'
		('port ->' port=IntegerLiteral)?
		('version ->' version=StringLiteral)?
		('registerProgram -> ' program+=[Program])*
		
'}' 
;

Program:
	'program ' name=ValidID '->' path=ConcatExpression '{'
		functions+=Function*
	'}'
;

Param:
	name=ValidID
;

Function:
	'def' name=ID ('with ' printOutMode=PrintMode)?'{'
		('desc ->' desc=StringLiteral)?
		('docurl ->' docurl=StringLiteral)?
		('input' input+=InputDataDefinition)*
		('output ' output+=OutputDataDefinition)*
		('* ' optionBlocks+=Option)*
	'}'
;


InputDataDefinition:
	{InputDataDefinition}
	input=Param 'as' type=InputDataType ('doc -> ' doc=StringLiteral)?
;
OutputDataDefinition:
	{OutputDataDefinition}
	input=Param 'as' type=OutputDataType ('doc -> ' doc=StringLiteral)?
;


enum PrintMode:
	STDOUT = "STDOUT"| STDERR = "STDERR"| BOTH = "BOTH"
;

enum InputDataType:
	STRING='STRING' |
	PATH='PATH'
;
enum OutputDataType:
	PATH='PATH' |
	FOLDERPATH = "FOLDERPATH" 
;

Option:
	param = ConcatExpression
;


ConcatExpression returns Expression:
Primary  ({Concatenation.left=current}'+' right=Primary)*;

StringLiteral :
	value=STRING;

IntegerLiteral:
	value=INT;
	
DoubleLiteral:
	value=INT'.'INT;


  
QualifiedName:
  ValidID ('.' ValidID)*;

ValidID:
	ID;


Primary returns Expression:
	StringLiteral |
	IntegerLiteral |
	DoubleLiteral |
	param=[Param];
