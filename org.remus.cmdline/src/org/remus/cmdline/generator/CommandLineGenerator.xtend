/*
 * generated by Xtext
 */
package org.remus.cmdline.generator

import java.io.StringWriter
import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.remus.cmdline.commandLine.Concatenation
import org.remus.cmdline.commandLine.DataDefinition
import org.remus.cmdline.commandLine.Expression
import org.remus.cmdline.commandLine.Function
import org.remus.cmdline.commandLine.IntegerLiteral
import org.remus.cmdline.commandLine.Program
import org.remus.cmdline.commandLine.StringLiteral

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class CommandLineGenerator implements IGenerator {
	
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		for (e : resource.allContents.toIterable.filter(Function)) {
			fsa.generateFile("org/remus/cmd/gen/commands/" + javaName(e)+".java",compile(e));
		}

	}

	
	def compile(Function function) {
		
		
		'''
package org.remus.mediaexeutor.exec;
		
import java.io.IOException;
import java.text.MessageFormat;

import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;
import org.apache.commons.exec.ExecuteException;
import org.apache.commons.exec.PumpStreamHandler;
import org.apache.log4j.Logger;
import org.remus.mediaexeutor.base.Arguments;
import org.remus.mediaexeutor.base.ExecutionInstruction;
import org.remus.mediaexeutor.data.ParamDataType;
import org.remus.mediaexeutor.data.ParamType;

/**
 * 
 * WARNING: This class is generated code. Please do not modify its content.
 * 
 * @author Tom Seidel - tom.seidel@remus-software.org
 * 
 * 
 */
public class «javaName(function)» extends ExecutionInstruction {
	private final Logger LOGGER = Logger.getLogger(«javaName(function)».class);
	private final Arguments arguments;
	
	public «javaName(function)»(final Arguments createArguments) {
		arguments = createArguments;
	}
	
	public static «javaName(function)» create(«argumentsList(function,true)») {
		return new «javaName(function)»(createArguments(«argumentsList(function,false)»));
	}
	private static Arguments createArguments(«argumentsList(function,true)») {
		final Arguments arguments = new Arguments();
		return arguments
		«FOR param: function.params»
		.add("«param.name»", «param.name»)
		«ENDFOR»
				;
	}
	public boolean checkArguments() {
		boolean valid = true;
		«FOR m: function.input»
		«inputCheck(m)»
		«ENDFOR»
		«FOR m: function.output»
		«outputCheck(m)»
		«ENDFOR»
		return true;
	}
	
	@Override
	public void execute(final Arguments arguments) {
		LOGGER.info("Starting execution with arguments: " + arguments);
		«FOR m : function.params»
		final String «m.name» = arguments.get("«m.name»");
		«ENDFOR»
		final CommandLine cmd = new CommandLine("«(function.eContainer as Program).name»");
		«FOR m:function.optionBlocks»
		cmd.addArgument(«expression2String(m.param,false)»);
		«ENDFOR»
		final DefaultExecutor executor = new DefaultExecutor();
		LOGGER.info("About to execute: " + cmd);
		executor.setStreamHandler(new PumpStreamHandler(getProcessStream(),
				getErrorStream()));
		try {
			final int execute = executor.execute(cmd);
			LOGGER.info(MessageFormat.format(
					"Execution finished with Code {0}", execute));
		} catch (final ExecuteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (final IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	@Override
	public String getDoc() {
		return "«function.doc.value»";
	}
	
	@Override
	public String getDocUrl() {
		return "«function.docurl.value»";
	}
	@Override
	public String getId() {
		return "«function.javaName.toString.toLowerCase»";
	}
	
	@Override
	protected List<ResultDataElement> getOutputElements() {
		final List<ResultDataElement> returnValue = new ArrayList<ResultDataElement>();
		«FOR m:function.output»
		returnValue.add(new ResultDataElement(arguments.get("«m.input.name»"),
				ParamDataType.«m.type.literal»));
		«ENDFOR»
		return returnValue;
	}
	
}
		'''
	}

def inputCheck(DataDefinition definition) {
		'''
		
		valid &= checkArgument(arguments.get("«definition.input.name»"), ParamDataType.«definition.type.literal»,
				ParamType.INPUT);
		if (!valid) {
			return false;
		}
		'''
	}
def outputCheck(DataDefinition definition) {
		'''
		valid &= checkArgument(arguments.get("«definition.input.name»"), ParamDataType.«definition.type.literal»,
				ParamType.OUTPUT);
		if (!valid) {
			return false;
		}
		'''
	}

def argumentsList(Function function, boolean datatype) {
	'''
		«FOR param : function.params SEPARATOR ','»
			«IF datatype»final String «ENDIF»«param.name»
		«ENDFOR»
	'''
	}
	
	def javaName(Function function) {
		val program = function.eContainer as Program
		'''«program.name.toFirstUpper»_«function.name.toFirstUpper»'''
	}
	
	def expression2String (Expression expression, boolean escapeParams) {
		val returnValue = new StringWriter();
		if( expression instanceof Concatenation ) {
			val concat = (expression as Concatenation)
			returnValue.append(expression2String(concat.left,escapeParams) + "+" +expression2String(concat.right,escapeParams));
		} else if( expression instanceof StringLiteral) {
			val string = (expression as StringLiteral)
			returnValue.append("\"" + string.value +"\"")
		} else if( expression instanceof IntegerLiteral) {
			val inte = (expression as IntegerLiteral)
			returnValue.append(inte.value+"")
		} else {
			if (escapeParams) {
				returnValue.append("arguments.get("+expression.param.name+")");	
			} else {
				returnValue.append(expression.param.name);	
			}
		}
		return returnValue.toString
	}

}
