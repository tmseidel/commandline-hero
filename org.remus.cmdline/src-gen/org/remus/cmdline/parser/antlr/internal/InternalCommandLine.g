/*
* generated by Xtext
*/
grammar InternalCommandLine;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.remus.cmdline.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.remus.cmdline.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.remus.cmdline.services.CommandLineGrammarAccess;

}

@parser::members {

 	private CommandLineGrammarAccess grammarAccess;
 	
    public InternalCommandLineParser(TokenStream input, CommandLineGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CommandLineGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProgramsProgramParserRuleCall_0_0()); 
	    }
		lv_programs_0_0=ruleProgram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"programs",
        		lv_programs_0_0, 
        		"Program");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSystemSystemParserRuleCall_1_0()); 
	    }
		lv_system_1_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_1_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='system ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemAccess().getSystemKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSystemAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='port ->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSystemAccess().getPortKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getPortIntegerLiteralParserRuleCall_3_1_0()); 
	    }
		lv_port_4_0=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		set(
       			$current, 
       			"port",
        		lv_port_4_0, 
        		"IntegerLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='version ->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSystemAccess().getVersionKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getVersionStringLiteralParserRuleCall_4_1_0()); 
	    }
		lv_version_6_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		set(
       			$current, 
       			"version",
        		lv_version_6_0, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='registerProgram -> ' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSystemAccess().getRegisterProgramKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getSystemAccess().getProgramProgramCrossReference_5_1_0()); 
	}

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSystemAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='program ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getHyphenMinusGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getPathConcatExpressionParserRuleCall_3_0()); 
	    }
		lv_path_3_0=ruleConcatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"ConcatExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_5_0()); 
	    }
		lv_functions_5_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_5_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getNameValidIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='def' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getDefKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='with ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getWithKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getPrintOutModePrintModeEnumRuleCall_2_1_0()); 
	    }
		lv_printOutMode_3_0=rulePrintMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"printOutMode",
        		lv_printOutMode_3_0, 
        		"PrintMode");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_5='desc ->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getDescKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getDescStringLiteralParserRuleCall_4_1_0()); 
	    }
		lv_desc_6_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"desc",
        		lv_desc_6_0, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='docurl ->' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getDocurlKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getDocurlStringLiteralParserRuleCall_5_1_0()); 
	    }
		lv_docurl_8_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"docurl",
        		lv_docurl_8_0, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='input' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunctionAccess().getInputKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getInputInputDataDefinitionParserRuleCall_6_1_0()); 
	    }
		lv_input_10_0=ruleInputDataDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"input",
        		lv_input_10_0, 
        		"InputDataDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_11='output ' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFunctionAccess().getOutputKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getOutputOutputDataDefinitionParserRuleCall_7_1_0()); 
	    }
		lv_output_12_0=ruleOutputDataDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"output",
        		lv_output_12_0, 
        		"OutputDataDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_13='* ' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getFunctionAccess().getAsteriskSpaceKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getOptionBlocksOptionParserRuleCall_8_1_0()); 
	    }
		lv_optionBlocks_14_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"optionBlocks",
        		lv_optionBlocks_14_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleInputDataDefinition
entryRuleInputDataDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputDataDefinitionRule()); }
	 iv_ruleInputDataDefinition=ruleInputDataDefinition 
	 { $current=$iv_ruleInputDataDefinition.current; } 
	 EOF 
;

// Rule InputDataDefinition
ruleInputDataDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInputDataDefinitionAccess().getInputDataDefinitionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInputDataDefinitionAccess().getInputParamParserRuleCall_1_0()); 
	    }
		lv_input_1_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputDataDefinitionRule());
	        }
       		set(
       			$current, 
       			"input",
        		lv_input_1_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInputDataDefinitionAccess().getAsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputDataDefinitionAccess().getTypeInputDataTypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleInputDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputDataDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"InputDataType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='doc -> ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInputDataDefinitionAccess().getDocKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputDataDefinitionAccess().getDocStringLiteralParserRuleCall_4_1_0()); 
	    }
		lv_doc_5_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputDataDefinitionRule());
	        }
       		set(
       			$current, 
       			"doc",
        		lv_doc_5_0, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOutputDataDefinition
entryRuleOutputDataDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputDataDefinitionRule()); }
	 iv_ruleOutputDataDefinition=ruleOutputDataDefinition 
	 { $current=$iv_ruleOutputDataDefinition.current; } 
	 EOF 
;

// Rule OutputDataDefinition
ruleOutputDataDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOutputDataDefinitionAccess().getOutputDataDefinitionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputDataDefinitionAccess().getInputParamParserRuleCall_1_0()); 
	    }
		lv_input_1_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputDataDefinitionRule());
	        }
       		set(
       			$current, 
       			"input",
        		lv_input_1_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOutputDataDefinitionAccess().getAsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputDataDefinitionAccess().getTypeOutputDataTypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleOutputDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputDataDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"OutputDataType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='doc -> ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOutputDataDefinitionAccess().getDocKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputDataDefinitionAccess().getDocStringLiteralParserRuleCall_4_1_0()); 
	    }
		lv_doc_5_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputDataDefinitionRule());
	        }
       		set(
       			$current, 
       			"doc",
        		lv_doc_5_0, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	 iv_ruleOption=ruleOption 
	 { $current=$iv_ruleOption.current; } 
	 EOF 
;

// Rule Option
ruleOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionAccess().getParamConcatExpressionParserRuleCall_0()); 
	    }
		lv_param_0_0=ruleConcatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"ConcatExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleConcatExpression
entryRuleConcatExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConcatExpressionRule()); }
	 iv_ruleConcatExpression=ruleConcatExpression 
	 { $current=$iv_ruleConcatExpression.current; } 
	 EOF 
;

// Rule ConcatExpression
ruleConcatExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConcatExpressionAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConcatExpressionAccess().getConcatenationLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConcatExpressionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcatExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcatExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleLiteralRule()); }
	 iv_ruleDoubleLiteral=ruleDoubleLiteral 
	 { $current=$iv_ruleDoubleLiteral.current; } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDoubleLiteralAccess().getValueINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDoubleLiteralAccess().getFullStopKeyword_1());
    }
this_INT_2=RULE_INT
    { 
    newLeafNode(this_INT_2, grammarAccess.getDoubleLiteralAccess().getINTTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getStringLiteralParserRuleCall_0()); 
    }
    this_StringLiteral_0=ruleStringLiteral
    { 
        $current = $this_StringLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getIntegerLiteralParserRuleCall_1()); 
    }
    this_IntegerLiteral_1=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getDoubleLiteralParserRuleCall_2()); 
    }
    this_DoubleLiteral_2=ruleDoubleLiteral
    { 
        $current = $this_DoubleLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getParamParamCrossReference_3_0()); 
	}

)
))
;





// Rule PrintMode
rulePrintMode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='STDOUT' 
	{
        $current = grammarAccess.getPrintModeAccess().getSTDOUTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPrintModeAccess().getSTDOUTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='STDERR' 
	{
        $current = grammarAccess.getPrintModeAccess().getSTDERREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPrintModeAccess().getSTDERREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='BOTH' 
	{
        $current = grammarAccess.getPrintModeAccess().getBOTHEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPrintModeAccess().getBOTHEnumLiteralDeclaration_2()); 
    }
));



// Rule InputDataType
ruleInputDataType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='STRING' 
	{
        $current = grammarAccess.getInputDataTypeAccess().getSTRINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getInputDataTypeAccess().getSTRINGEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='PATH' 
	{
        $current = grammarAccess.getInputDataTypeAccess().getPATHEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getInputDataTypeAccess().getPATHEnumLiteralDeclaration_1()); 
    }
));



// Rule OutputDataType
ruleOutputDataType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='PATH' 
	{
        $current = grammarAccess.getOutputDataTypeAccess().getPATHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOutputDataTypeAccess().getPATHEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='FOLDERPATH' 
	{
        $current = grammarAccess.getOutputDataTypeAccess().getFOLDERPATHEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOutputDataTypeAccess().getFOLDERPATHEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


