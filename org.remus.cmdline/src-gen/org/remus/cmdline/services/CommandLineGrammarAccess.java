/*
* generated by Xtext
*/
package org.remus.cmdline.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CommandLineGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cProgramsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProgramsProgramParserRuleCall_1_0 = (RuleCall)cProgramsAssignment_1.eContents().get(0);
		private final Assignment cSystemAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSystemSystemParserRuleCall_2_0 = (RuleCall)cSystemAssignment_2.eContents().get(0);
		
		//Model:
		//
		//	imports+=Import* // allow imports
		//
		//	programs=Program? system=System?;
		public ParserRule getRule() { return rule; }

		//imports+=Import* // allow imports
		//
		//programs=Program? system=System?
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//programs=Program?
		public Assignment getProgramsAssignment_1() { return cProgramsAssignment_1; }

		//Program
		public RuleCall getProgramsProgramParserRuleCall_1_0() { return cProgramsProgramParserRuleCall_1_0; }

		//system=System?
		public Assignment getSystemAssignment_2() { return cSystemAssignment_2; }

		//System
		public RuleCall getSystemSystemParserRuleCall_2_0() { return cSystemSystemParserRuleCall_2_0; }
	}

	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPortKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPortAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPortIntegerLiteralParserRuleCall_3_1_0 = (RuleCall)cPortAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHostKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cHostAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHostStringLiteralParserRuleCall_4_1_0 = (RuleCall)cHostAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRegisterProgramKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cProgramAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cProgramProgramCrossReference_5_1_0 = (CrossReference)cProgramAssignment_5_1.eContents().get(0);
		private final RuleCall cProgramProgramIDTerminalRuleCall_5_1_0_1 = (RuleCall)cProgramProgramCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//System:
		//
		//	"system " name=QualifiedName "{" ("port ->" port=IntegerLiteral)? ("host->" host=StringLiteral)?
		//
		//	("registerProgram -> " program+=[Program])+ "}";
		public ParserRule getRule() { return rule; }

		//"system " name=QualifiedName "{" ("port ->" port=IntegerLiteral)? ("host->" host=StringLiteral)? ("registerProgram -> "
		//
		//program+=[Program])+ "}"
		public Group getGroup() { return cGroup; }

		//"system "
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("port ->" port=IntegerLiteral)?
		public Group getGroup_3() { return cGroup_3; }

		//"port ->"
		public Keyword getPortKeyword_3_0() { return cPortKeyword_3_0; }

		//port=IntegerLiteral
		public Assignment getPortAssignment_3_1() { return cPortAssignment_3_1; }

		//IntegerLiteral
		public RuleCall getPortIntegerLiteralParserRuleCall_3_1_0() { return cPortIntegerLiteralParserRuleCall_3_1_0; }

		//("host->" host=StringLiteral)?
		public Group getGroup_4() { return cGroup_4; }

		//"host->"
		public Keyword getHostKeyword_4_0() { return cHostKeyword_4_0; }

		//host=StringLiteral
		public Assignment getHostAssignment_4_1() { return cHostAssignment_4_1; }

		//StringLiteral
		public RuleCall getHostStringLiteralParserRuleCall_4_1_0() { return cHostStringLiteralParserRuleCall_4_1_0; }

		//("registerProgram -> " program+=[Program])+
		public Group getGroup_5() { return cGroup_5; }

		//"registerProgram -> "
		public Keyword getRegisterProgramKeyword_5_0() { return cRegisterProgramKeyword_5_0; }

		//program+=[Program]
		public Assignment getProgramAssignment_5_1() { return cProgramAssignment_5_1; }

		//[Program]
		public CrossReference getProgramProgramCrossReference_5_1_0() { return cProgramProgramCrossReference_5_1_0; }

		//ID
		public RuleCall getProgramProgramIDTerminalRuleCall_5_1_0_1() { return cProgramProgramIDTerminalRuleCall_5_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathConcatExpressionParserRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionsFunctionParserRuleCall_5_0 = (RuleCall)cFunctionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Program:
		//
		//	"program " name=ValidID "->" path=ConcatExpression "{" functions+=Function* "}";
		public ParserRule getRule() { return rule; }

		//"program " name=ValidID "->" path=ConcatExpression "{" functions+=Function* "}"
		public Group getGroup() { return cGroup; }

		//"program "
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//path=ConcatExpression
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }

		//ConcatExpression
		public RuleCall getPathConcatExpressionParserRuleCall_3_0() { return cPathConcatExpressionParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//functions+=Function*
		public Assignment getFunctionsAssignment_5() { return cFunctionsAssignment_5; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_5_0() { return cFunctionsFunctionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Param:
		//
		//	name=ValidID;
		public ParserRule getRule() { return rule; }

		//name=ValidID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0() { return cNameValidIDParserRuleCall_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDescKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescStringLiteralParserRuleCall_3_1_0 = (RuleCall)cDescAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDocurlKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDocurlAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDocurlStringLiteralParserRuleCall_4_1_0 = (RuleCall)cDocurlAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInputKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInputAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInputDataDefinitionParserRuleCall_5_1_0 = (RuleCall)cInputAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOutputKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOutputAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOutputDataDefinitionParserRuleCall_6_1_0 = (RuleCall)cOutputAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAsteriskSpaceKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOptionBlocksAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOptionBlocksOptionParserRuleCall_7_1_0 = (RuleCall)cOptionBlocksAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Function:
		//
		//	"def" name=ID "{" ("desc ->" desc=StringLiteral)? ("docurl ->" docurl=StringLiteral)? ("input"
		//
		//	input+=DataDefinition)* ("output " output+=DataDefinition)+ ("* " optionBlocks+=Option)* "}";
		public ParserRule getRule() { return rule; }

		//"def" name=ID "{" ("desc ->" desc=StringLiteral)? ("docurl ->" docurl=StringLiteral)? ("input" input+=DataDefinition)*
		//
		//("output " output+=DataDefinition)+ ("* " optionBlocks+=Option)* "}"
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("desc ->" desc=StringLiteral)?
		public Group getGroup_3() { return cGroup_3; }

		//"desc ->"
		public Keyword getDescKeyword_3_0() { return cDescKeyword_3_0; }

		//desc=StringLiteral
		public Assignment getDescAssignment_3_1() { return cDescAssignment_3_1; }

		//StringLiteral
		public RuleCall getDescStringLiteralParserRuleCall_3_1_0() { return cDescStringLiteralParserRuleCall_3_1_0; }

		//("docurl ->" docurl=StringLiteral)?
		public Group getGroup_4() { return cGroup_4; }

		//"docurl ->"
		public Keyword getDocurlKeyword_4_0() { return cDocurlKeyword_4_0; }

		//docurl=StringLiteral
		public Assignment getDocurlAssignment_4_1() { return cDocurlAssignment_4_1; }

		//StringLiteral
		public RuleCall getDocurlStringLiteralParserRuleCall_4_1_0() { return cDocurlStringLiteralParserRuleCall_4_1_0; }

		//("input" input+=DataDefinition)*
		public Group getGroup_5() { return cGroup_5; }

		//"input"
		public Keyword getInputKeyword_5_0() { return cInputKeyword_5_0; }

		//input+=DataDefinition
		public Assignment getInputAssignment_5_1() { return cInputAssignment_5_1; }

		//DataDefinition
		public RuleCall getInputDataDefinitionParserRuleCall_5_1_0() { return cInputDataDefinitionParserRuleCall_5_1_0; }

		//("output " output+=DataDefinition)+
		public Group getGroup_6() { return cGroup_6; }

		//"output "
		public Keyword getOutputKeyword_6_0() { return cOutputKeyword_6_0; }

		//output+=DataDefinition
		public Assignment getOutputAssignment_6_1() { return cOutputAssignment_6_1; }

		//DataDefinition
		public RuleCall getOutputDataDefinitionParserRuleCall_6_1_0() { return cOutputDataDefinitionParserRuleCall_6_1_0; }

		//("* " optionBlocks+=Option)*
		public Group getGroup_7() { return cGroup_7; }

		//"* "
		public Keyword getAsteriskSpaceKeyword_7_0() { return cAsteriskSpaceKeyword_7_0; }

		//optionBlocks+=Option
		public Assignment getOptionBlocksAssignment_7_1() { return cOptionBlocksAssignment_7_1; }

		//Option
		public RuleCall getOptionBlocksOptionParserRuleCall_7_1_0() { return cOptionBlocksOptionParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class DataDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputParamParserRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		private final Keyword cASKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDocKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDocAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDocStringLiteralParserRuleCall_4_1_0 = (RuleCall)cDocAssignment_4_1.eContents().get(0);
		
		//DataDefinition:
		//
		//	{DataDefinition} input=Param "AS" type=DataType ("doc -> " doc=StringLiteral)?;
		public ParserRule getRule() { return rule; }

		//{DataDefinition} input=Param "AS" type=DataType ("doc -> " doc=StringLiteral)?
		public Group getGroup() { return cGroup; }

		//{DataDefinition}
		public Action getDataDefinitionAction_0() { return cDataDefinitionAction_0; }

		//input=Param
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }

		//Param
		public RuleCall getInputParamParserRuleCall_1_0() { return cInputParamParserRuleCall_1_0; }

		//"AS"
		public Keyword getASKeyword_2() { return cASKeyword_2; }

		//type=DataType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_3_0() { return cTypeDataTypeEnumRuleCall_3_0; }

		//("doc -> " doc=StringLiteral)?
		public Group getGroup_4() { return cGroup_4; }

		//"doc -> "
		public Keyword getDocKeyword_4_0() { return cDocKeyword_4_0; }

		//doc=StringLiteral
		public Assignment getDocAssignment_4_1() { return cDocAssignment_4_1; }

		//StringLiteral
		public RuleCall getDocStringLiteralParserRuleCall_4_1_0() { return cDocStringLiteralParserRuleCall_4_1_0; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Assignment cParamAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParamConcatExpressionParserRuleCall_0 = (RuleCall)cParamAssignment.eContents().get(0);
		
		//Option:
		//
		//	param=ConcatExpression;
		public ParserRule getRule() { return rule; }

		//param=ConcatExpression
		public Assignment getParamAssignment() { return cParamAssignment; }

		//ConcatExpression
		public RuleCall getParamConcatExpressionParserRuleCall_0() { return cParamConcatExpressionParserRuleCall_0; }
	}

	public class ConcatExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcatExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConcatenationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConcatExpression returns Expression:
		//
		//	Primary ({Concatenation.left=current} "+" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({Concatenation.left=current} "+" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Concatenation.left=current} "+" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Concatenation.left=current}
		public Action getConcatenationLeftAction_1_0() { return cConcatenationLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DoubleLiteral:
		//
		//	value=INT "." INT;
		public ParserRule getRule() { return rule; }

		//value=INT "." INT
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//("." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cParamParamCrossReference_3_0 = (CrossReference)cParamAssignment_3.eContents().get(0);
		private final RuleCall cParamParamIDTerminalRuleCall_3_0_1 = (RuleCall)cParamParamCrossReference_3_0.eContents().get(1);
		
		//Primary returns Expression:
		//
		//	StringLiteral | IntegerLiteral | DoubleLiteral | param=[Param];
		public ParserRule getRule() { return rule; }

		//StringLiteral | IntegerLiteral | DoubleLiteral | param=[Param]
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_1() { return cIntegerLiteralParserRuleCall_1; }

		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_2() { return cDoubleLiteralParserRuleCall_2; }

		//param=[Param]
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }

		//[Param]
		public CrossReference getParamParamCrossReference_3_0() { return cParamParamCrossReference_3_0; }

		//ID
		public RuleCall getParamParamIDTerminalRuleCall_3_0_1() { return cParamParamIDTerminalRuleCall_3_0_1; }
	}
	
	
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGSTRINGKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cURLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cURLURLKeyword_1_0 = (Keyword)cURLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDATAEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDATADATAKeyword_2_0 = (Keyword)cDATAEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPATHEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPATHPATHKeyword_3_0 = (Keyword)cPATHEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFOLDERPATHEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFOLDERPATHFOLDERPATHKeyword_4_0 = (Keyword)cFOLDERPATHEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum DataType:
		//
		//	STRING | URL | DATA | PATH | FOLDERPATH;
		public EnumRule getRule() { return rule; }

		//STRING | URL | DATA | PATH | FOLDERPATH
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }

		//"STRING"
		public Keyword getSTRINGSTRINGKeyword_0_0() { return cSTRINGSTRINGKeyword_0_0; }

		//URL
		public EnumLiteralDeclaration getURLEnumLiteralDeclaration_1() { return cURLEnumLiteralDeclaration_1; }

		//"URL"
		public Keyword getURLURLKeyword_1_0() { return cURLURLKeyword_1_0; }

		//DATA
		public EnumLiteralDeclaration getDATAEnumLiteralDeclaration_2() { return cDATAEnumLiteralDeclaration_2; }

		//"DATA"
		public Keyword getDATADATAKeyword_2_0() { return cDATADATAKeyword_2_0; }

		//PATH
		public EnumLiteralDeclaration getPATHEnumLiteralDeclaration_3() { return cPATHEnumLiteralDeclaration_3; }

		//"PATH"
		public Keyword getPATHPATHKeyword_3_0() { return cPATHPATHKeyword_3_0; }

		//FOLDERPATH
		public EnumLiteralDeclaration getFOLDERPATHEnumLiteralDeclaration_4() { return cFOLDERPATHEnumLiteralDeclaration_4; }

		//"FOLDERPATH"
		public Keyword getFOLDERPATHFOLDERPATHKeyword_4_0() { return cFOLDERPATHFOLDERPATHKeyword_4_0; }
	}
	
	private ModelElements pModel;
	private SystemElements pSystem;
	private ProgramElements pProgram;
	private ParamElements pParam;
	private FunctionElements pFunction;
	private DataDefinitionElements pDataDefinition;
	private DataTypeElements unknownRuleDataType;
	private OptionElements pOption;
	private ConcatExpressionElements pConcatExpression;
	private StringLiteralElements pStringLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private DoubleLiteralElements pDoubleLiteral;
	private ImportElements pImport;
	private QualifiedNameElements pQualifiedName;
	private ValidIDElements pValidID;
	private PrimaryElements pPrimary;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CommandLineGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.remus.cmdline.CommandLine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	imports+=Import* // allow imports
	//
	//	programs=Program? system=System?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//System:
	//
	//	"system " name=QualifiedName "{" ("port ->" port=IntegerLiteral)? ("host->" host=StringLiteral)?
	//
	//	("registerProgram -> " program+=[Program])+ "}";
	public SystemElements getSystemAccess() {
		return (pSystem != null) ? pSystem : (pSystem = new SystemElements());
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//Program:
	//
	//	"program " name=ValidID "->" path=ConcatExpression "{" functions+=Function* "}";
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Param:
	//
	//	name=ValidID;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//Function:
	//
	//	"def" name=ID "{" ("desc ->" desc=StringLiteral)? ("docurl ->" docurl=StringLiteral)? ("input"
	//
	//	input+=DataDefinition)* ("output " output+=DataDefinition)+ ("* " optionBlocks+=Option)* "}";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//DataDefinition:
	//
	//	{DataDefinition} input=Param "AS" type=DataType ("doc -> " doc=StringLiteral)?;
	public DataDefinitionElements getDataDefinitionAccess() {
		return (pDataDefinition != null) ? pDataDefinition : (pDataDefinition = new DataDefinitionElements());
	}
	
	public ParserRule getDataDefinitionRule() {
		return getDataDefinitionAccess().getRule();
	}

	//enum DataType:
	//
	//	STRING | URL | DATA | PATH | FOLDERPATH;
	public DataTypeElements getDataTypeAccess() {
		return (unknownRuleDataType != null) ? unknownRuleDataType : (unknownRuleDataType = new DataTypeElements());
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//Option:
	//
	//	param=ConcatExpression;
	public OptionElements getOptionAccess() {
		return (pOption != null) ? pOption : (pOption = new OptionElements());
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	//ConcatExpression returns Expression:
	//
	//	Primary ({Concatenation.left=current} "+" right=Primary)*;
	public ConcatExpressionElements getConcatExpressionAccess() {
		return (pConcatExpression != null) ? pConcatExpression : (pConcatExpression = new ConcatExpressionElements());
	}
	
	public ParserRule getConcatExpressionRule() {
		return getConcatExpressionAccess().getRule();
	}

	//StringLiteral:
	//
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//DoubleLiteral:
	//
	//	value=INT "." INT;
	public DoubleLiteralElements getDoubleLiteralAccess() {
		return (pDoubleLiteral != null) ? pDoubleLiteral : (pDoubleLiteral = new DoubleLiteralElements());
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}

	//Import:
	//
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedName:
	//
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidID:
	//
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return (pValidID != null) ? pValidID : (pValidID = new ValidIDElements());
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//Primary returns Expression:
	//
	//	StringLiteral | IntegerLiteral | DoubleLiteral | param=[Param];
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
