/*
* generated by Xtext
*/
grammar InternalCommandLine;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.remus.cmdline.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.remus.cmdline.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.remus.cmdline.services.CommandLineGrammarAccess;

}

@parser::members {
 
 	private CommandLineGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CommandLineGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParam
entryRuleParam 
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamAccess().getNameAssignment()); }
(rule__Param__NameAssignment)
{ after(grammarAccess.getParamAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataDefinition
entryRuleDataDefinition 
:
{ before(grammarAccess.getDataDefinitionRule()); }
	 ruleDataDefinition
{ after(grammarAccess.getDataDefinitionRule()); } 
	 EOF 
;

// Rule DataDefinition
ruleDataDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataDefinitionAccess().getGroup()); }
(rule__DataDefinition__Group__0)
{ after(grammarAccess.getDataDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOption
entryRuleOption 
:
{ before(grammarAccess.getOptionRule()); }
	 ruleOption
{ after(grammarAccess.getOptionRule()); } 
	 EOF 
;

// Rule Option
ruleOption
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionAccess().getParamAssignment()); }
(rule__Option__ParamAssignment)
{ after(grammarAccess.getOptionAccess().getParamAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcatExpression
entryRuleConcatExpression 
:
{ before(grammarAccess.getConcatExpressionRule()); }
	 ruleConcatExpression
{ after(grammarAccess.getConcatExpressionRule()); } 
	 EOF 
;

// Rule ConcatExpression
ruleConcatExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcatExpressionAccess().getGroup()); }
(rule__ConcatExpression__Group__0)
{ after(grammarAccess.getConcatExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
(rule__IntegerLiteral__ValueAssignment)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral 
:
{ before(grammarAccess.getDoubleLiteralRule()); }
	 ruleDoubleLiteral
{ after(grammarAccess.getDoubleLiteralRule()); } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleLiteralAccess().getGroup()); }
(rule__DoubleLiteral__Group__0)
{ after(grammarAccess.getDoubleLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleValidID
entryRuleValidID 
:
{ before(grammarAccess.getValidIDRule()); }
	 ruleValidID
{ after(grammarAccess.getValidIDRule()); } 
	 EOF 
;

// Rule ValidID
ruleValidID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule DataType
ruleDataType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
(rule__DataType__Alternatives)
{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getStringLiteralParserRuleCall_0()); }
	ruleStringLiteral
{ after(grammarAccess.getPrimaryAccess().getStringLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getIntegerLiteralParserRuleCall_1()); }
	ruleIntegerLiteral
{ after(grammarAccess.getPrimaryAccess().getIntegerLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getDoubleLiteralParserRuleCall_2()); }
	ruleDoubleLiteral
{ after(grammarAccess.getPrimaryAccess().getDoubleLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getParamAssignment_3()); }
(rule__Primary__ParamAssignment_3)
{ after(grammarAccess.getPrimaryAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getSTRINGEnumLiteralDeclaration_0()); }
(	'STRING' 
)
{ after(grammarAccess.getDataTypeAccess().getSTRINGEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getURLEnumLiteralDeclaration_1()); }
(	'URL' 
)
{ after(grammarAccess.getDataTypeAccess().getURLEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getDATAEnumLiteralDeclaration_2()); }
(	'DATA' 
)
{ after(grammarAccess.getDataTypeAccess().getDATAEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getPATHEnumLiteralDeclaration_3()); }
(	'PATH' 
)
{ after(grammarAccess.getDataTypeAccess().getPATHEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getFOLDERPATHEnumLiteralDeclaration_4()); }
(	'FOLDERPATH' 
)
{ after(grammarAccess.getDataTypeAccess().getFOLDERPATHEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
(rule__Model__ImportsAssignment_0)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProgramsAssignment_1()); }
(rule__Model__ProgramsAssignment_1)
{ after(grammarAccess.getModelAccess().getProgramsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getProgramKeyword_0()); }

	'program ' 

{ after(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
(rule__Program__NameAssignment_1)
{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	'->' 

{ after(grammarAccess.getProgramAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getPathAssignment_3()); }
(rule__Program__PathAssignment_3)
{ after(grammarAccess.getProgramAccess().getPathAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__4__Impl
	rule__Program__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__5__Impl
	rule__Program__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getFunctionsAssignment_5()); }
(rule__Program__FunctionsAssignment_5)*
{ after(grammarAccess.getProgramAccess().getFunctionsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDefKeyword_0()); }

	'def' 

{ after(grammarAccess.getFunctionAccess().getDefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
(rule__Function__NameAssignment_1)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3()); }
(rule__Function__Group_3__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__6__Impl
	rule__Function__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_6()); }
(rule__Function__Group_6__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__7__Impl
	rule__Function__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_7()); }
(rule__Function__Group_7__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__8__Impl
	rule__Function__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_8()); }
(rule__Function__Group_8__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__9__Impl
	rule__Function__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_9()); }
(rule__Function__Group_9__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__10__Impl
	rule__Function__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_10()); }
(rule__Function__Group_10__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_11()); }

	'}' 

{ after(grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__Function__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__0__Impl
	rule__Function__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParamsAssignment_3_0()); }
(rule__Function__ParamsAssignment_3_0)
{ after(grammarAccess.getFunctionAccess().getParamsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3_1()); }
(rule__Function__Group_3_1__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3_1__0__Impl
	rule__Function__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParamsAssignment_3_1_1()); }
(rule__Function__ParamsAssignment_3_1_1)
{ after(grammarAccess.getFunctionAccess().getParamsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_6__0__Impl
	rule__Function__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDocKeyword_6_0()); }

	'doc ->' 

{ after(grammarAccess.getFunctionAccess().getDocKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDocAssignment_6_1()); }
(rule__Function__DocAssignment_6_1)
{ after(grammarAccess.getFunctionAccess().getDocAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_7__0__Impl
	rule__Function__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDocurlKeyword_7_0()); }

	'docurl ->' 

{ after(grammarAccess.getFunctionAccess().getDocurlKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDocurlAssignment_7_1()); }
(rule__Function__DocurlAssignment_7_1)
{ after(grammarAccess.getFunctionAccess().getDocurlAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_8__0__Impl
	rule__Function__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getInputKeyword_8_0()); }

	'input' 

{ after(grammarAccess.getFunctionAccess().getInputKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getInputAssignment_8_1()); }
(rule__Function__InputAssignment_8_1)
{ after(grammarAccess.getFunctionAccess().getInputAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_9__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_9__0__Impl
	rule__Function__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_9__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getOutputKeyword_9_0()); }

	'output ' 

{ after(grammarAccess.getFunctionAccess().getOutputKeyword_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_9__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_9__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getOutputAssignment_9_1()); }
(rule__Function__OutputAssignment_9_1)
{ after(grammarAccess.getFunctionAccess().getOutputAssignment_9_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_10__0__Impl
	rule__Function__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getAsteriskSpaceKeyword_10_0()); }

	'* ' 

{ after(grammarAccess.getFunctionAccess().getAsteriskSpaceKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getOptionBlocksAssignment_10_1()); }
(rule__Function__OptionBlocksAssignment_10_1)
{ after(grammarAccess.getFunctionAccess().getOptionBlocksAssignment_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataDefinition__Group__0__Impl
	rule__DataDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getDataDefinitionAction_0()); }
(

)
{ after(grammarAccess.getDataDefinitionAccess().getDataDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataDefinition__Group__1__Impl
	rule__DataDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getInputAssignment_1()); }
(rule__DataDefinition__InputAssignment_1)
{ after(grammarAccess.getDataDefinitionAccess().getInputAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataDefinition__Group__2__Impl
	rule__DataDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getASKeyword_2()); }

	'AS' 

{ after(grammarAccess.getDataDefinitionAccess().getASKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getTypeAssignment_3()); }
(rule__DataDefinition__TypeAssignment_3)
{ after(grammarAccess.getDataDefinitionAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConcatExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group__0__Impl
	rule__ConcatExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getConcatExpressionAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getGroup_1()); }
(rule__ConcatExpression__Group_1__0)*
{ after(grammarAccess.getConcatExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcatExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group_1__0__Impl
	rule__ConcatExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getConcatenationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getConcatExpressionAccess().getConcatenationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group_1__1__Impl
	rule__ConcatExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getConcatExpressionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getRightAssignment_1_2()); }
(rule__ConcatExpression__RightAssignment_1_2)
{ after(grammarAccess.getConcatExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DoubleLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group__0__Impl
	rule__DoubleLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getValueAssignment_0()); }
(rule__DoubleLiteral__ValueAssignment_0)
{ after(grammarAccess.getDoubleLiteralAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group__1__Impl
	rule__DoubleLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getDoubleLiteralAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getDoubleLiteralAccess().getINTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ProgramsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProgramsProgramParserRuleCall_1_0()); }
	ruleProgram{ after(grammarAccess.getModelAccess().getProgramsProgramParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getProgramAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__PathAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getPathConcatExpressionParserRuleCall_3_0()); }
	ruleConcatExpression{ after(grammarAccess.getProgramAccess().getPathConcatExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__FunctionsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_5_0()); }
	ruleFunction{ after(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Param__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getNameValidIDParserRuleCall_0()); }
	ruleValidID{ after(grammarAccess.getParamAccess().getNameValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParamsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParamsParamParserRuleCall_3_0_0()); }
	ruleParam{ after(grammarAccess.getFunctionAccess().getParamsParamParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParamsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParamsParamParserRuleCall_3_1_1_0()); }
	ruleParam{ after(grammarAccess.getFunctionAccess().getParamsParamParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__DocAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDocStringLiteralParserRuleCall_6_1_0()); }
	ruleStringLiteral{ after(grammarAccess.getFunctionAccess().getDocStringLiteralParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__DocurlAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDocurlStringLiteralParserRuleCall_7_1_0()); }
	ruleStringLiteral{ after(grammarAccess.getFunctionAccess().getDocurlStringLiteralParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__InputAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getInputDataDefinitionParserRuleCall_8_1_0()); }
	ruleDataDefinition{ after(grammarAccess.getFunctionAccess().getInputDataDefinitionParserRuleCall_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__OutputAssignment_9_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getOutputDataDefinitionParserRuleCall_9_1_0()); }
	ruleDataDefinition{ after(grammarAccess.getFunctionAccess().getOutputDataDefinitionParserRuleCall_9_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__OptionBlocksAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getOptionBlocksOptionParserRuleCall_10_1_0()); }
	ruleOption{ after(grammarAccess.getFunctionAccess().getOptionBlocksOptionParserRuleCall_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataDefinition__InputAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getInputParamCrossReference_1_0()); }
(
{ before(grammarAccess.getDataDefinitionAccess().getInputParamIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDataDefinitionAccess().getInputParamIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDataDefinitionAccess().getInputParamCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataDefinition__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getTypeDataTypeEnumRuleCall_3_0()); }
	ruleDataType{ after(grammarAccess.getDataDefinitionAccess().getTypeDataTypeEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Option__ParamAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionAccess().getParamConcatExpressionParserRuleCall_0()); }
	ruleConcatExpression{ after(grammarAccess.getOptionAccess().getParamConcatExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getConcatExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getValueINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getDoubleLiteralAccess().getValueINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getParamParamCrossReference_3_0()); }
(
{ before(grammarAccess.getPrimaryAccess().getParamParamIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getPrimaryAccess().getParamParamIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getPrimaryAccess().getParamParamCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


