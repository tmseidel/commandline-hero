/*
* generated by Xtext
*/
package org.remus.cmdline.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.remus.cmdline.services.CommandLineGrammarAccess;

public class CommandLineParser extends AbstractContentAssistParser {
	
	@Inject
	private CommandLineGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.remus.cmdline.ui.contentassist.antlr.internal.InternalCommandLineParser createParser() {
		org.remus.cmdline.ui.contentassist.antlr.internal.InternalCommandLineParser result = new org.remus.cmdline.ui.contentassist.antlr.internal.InternalCommandLineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getPrintModeAccess().getAlternatives(), "rule__PrintMode__Alternatives");
					put(grammarAccess.getInputDataTypeAccess().getAlternatives(), "rule__InputDataType__Alternatives");
					put(grammarAccess.getOutputDataTypeAccess().getAlternatives(), "rule__OutputDataType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
					put(grammarAccess.getSystemAccess().getGroup_3(), "rule__System__Group_3__0");
					put(grammarAccess.getSystemAccess().getGroup_4(), "rule__System__Group_4__0");
					put(grammarAccess.getSystemAccess().getGroup_5(), "rule__System__Group_5__0");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup_2(), "rule__Function__Group_2__0");
					put(grammarAccess.getFunctionAccess().getGroup_4(), "rule__Function__Group_4__0");
					put(grammarAccess.getFunctionAccess().getGroup_5(), "rule__Function__Group_5__0");
					put(grammarAccess.getFunctionAccess().getGroup_6(), "rule__Function__Group_6__0");
					put(grammarAccess.getFunctionAccess().getGroup_7(), "rule__Function__Group_7__0");
					put(grammarAccess.getFunctionAccess().getGroup_8(), "rule__Function__Group_8__0");
					put(grammarAccess.getInputDataDefinitionAccess().getGroup(), "rule__InputDataDefinition__Group__0");
					put(grammarAccess.getInputDataDefinitionAccess().getGroup_4(), "rule__InputDataDefinition__Group_4__0");
					put(grammarAccess.getOutputDataDefinitionAccess().getGroup(), "rule__OutputDataDefinition__Group__0");
					put(grammarAccess.getOutputDataDefinitionAccess().getGroup_4(), "rule__OutputDataDefinition__Group_4__0");
					put(grammarAccess.getConcatExpressionAccess().getGroup(), "rule__ConcatExpression__Group__0");
					put(grammarAccess.getConcatExpressionAccess().getGroup_1(), "rule__ConcatExpression__Group_1__0");
					put(grammarAccess.getDoubleLiteralAccess().getGroup(), "rule__DoubleLiteral__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModelAccess().getProgramsAssignment_0(), "rule__Model__ProgramsAssignment_0");
					put(grammarAccess.getModelAccess().getSystemAssignment_1(), "rule__Model__SystemAssignment_1");
					put(grammarAccess.getSystemAccess().getNameAssignment_1(), "rule__System__NameAssignment_1");
					put(grammarAccess.getSystemAccess().getPortAssignment_3_1(), "rule__System__PortAssignment_3_1");
					put(grammarAccess.getSystemAccess().getVersionAssignment_4_1(), "rule__System__VersionAssignment_4_1");
					put(grammarAccess.getSystemAccess().getProgramAssignment_5_1(), "rule__System__ProgramAssignment_5_1");
					put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
					put(grammarAccess.getProgramAccess().getPathAssignment_3(), "rule__Program__PathAssignment_3");
					put(grammarAccess.getProgramAccess().getFunctionsAssignment_5(), "rule__Program__FunctionsAssignment_5");
					put(grammarAccess.getParamAccess().getNameAssignment(), "rule__Param__NameAssignment");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getPrintOutModeAssignment_2_1(), "rule__Function__PrintOutModeAssignment_2_1");
					put(grammarAccess.getFunctionAccess().getDescAssignment_4_1(), "rule__Function__DescAssignment_4_1");
					put(grammarAccess.getFunctionAccess().getDocurlAssignment_5_1(), "rule__Function__DocurlAssignment_5_1");
					put(grammarAccess.getFunctionAccess().getInputAssignment_6_1(), "rule__Function__InputAssignment_6_1");
					put(grammarAccess.getFunctionAccess().getOutputAssignment_7_1(), "rule__Function__OutputAssignment_7_1");
					put(grammarAccess.getFunctionAccess().getOptionBlocksAssignment_8_1(), "rule__Function__OptionBlocksAssignment_8_1");
					put(grammarAccess.getInputDataDefinitionAccess().getInputAssignment_1(), "rule__InputDataDefinition__InputAssignment_1");
					put(grammarAccess.getInputDataDefinitionAccess().getTypeAssignment_3(), "rule__InputDataDefinition__TypeAssignment_3");
					put(grammarAccess.getInputDataDefinitionAccess().getDocAssignment_4_1(), "rule__InputDataDefinition__DocAssignment_4_1");
					put(grammarAccess.getOutputDataDefinitionAccess().getInputAssignment_1(), "rule__OutputDataDefinition__InputAssignment_1");
					put(grammarAccess.getOutputDataDefinitionAccess().getTypeAssignment_3(), "rule__OutputDataDefinition__TypeAssignment_3");
					put(grammarAccess.getOutputDataDefinitionAccess().getDocAssignment_4_1(), "rule__OutputDataDefinition__DocAssignment_4_1");
					put(grammarAccess.getOptionAccess().getParamAssignment(), "rule__Option__ParamAssignment");
					put(grammarAccess.getConcatExpressionAccess().getRightAssignment_1_2(), "rule__ConcatExpression__RightAssignment_1_2");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getIntegerLiteralAccess().getValueAssignment(), "rule__IntegerLiteral__ValueAssignment");
					put(grammarAccess.getDoubleLiteralAccess().getValueAssignment_0(), "rule__DoubleLiteral__ValueAssignment_0");
					put(grammarAccess.getPrimaryAccess().getParamAssignment_3(), "rule__Primary__ParamAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.remus.cmdline.ui.contentassist.antlr.internal.InternalCommandLineParser typedParser = (org.remus.cmdline.ui.contentassist.antlr.internal.InternalCommandLineParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CommandLineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CommandLineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
